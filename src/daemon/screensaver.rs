// This code was autogenerated with `dbus-codegen-rust -d org.freedesktop.ScreenSaver -p /org/freedesktop/ScreenSaver`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopScreenSaver {
    fn lock(&self) -> Result<(), dbus::Error>;
    fn simulate_user_activity(&self) -> Result<(), dbus::Error>;
    fn get_active(&self) -> Result<bool, dbus::Error>;
    fn get_active_time(&self) -> Result<u32, dbus::Error>;
    fn get_session_idle_time(&self) -> Result<u32, dbus::Error>;
    fn set_active(&self, e_: bool) -> Result<bool, dbus::Error>;
    fn inhibit(&self, application_name: &str, reason_for_inhibit: &str) -> Result<u32, dbus::Error>;
    fn un_inhibit(&self, cookie: u32) -> Result<(), dbus::Error>;
    fn throttle(&self, application_name: &str, reason_for_inhibit: &str) -> Result<u32, dbus::Error>;
    fn un_throttle(&self, cookie: u32) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopScreenSaverActiveChanged {
    pub arg0: bool,
}

impl arg::AppendAll for OrgFreedesktopScreenSaverActiveChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.arg0, i);
    }
}

impl arg::ReadAll for OrgFreedesktopScreenSaverActiveChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopScreenSaverActiveChanged {
            arg0: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopScreenSaverActiveChanged {
    const NAME: &'static str = "ActiveChanged";
    const INTERFACE: &'static str = "org.freedesktop.ScreenSaver";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopScreenSaver for blocking::Proxy<'a, C> {

    fn lock(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "Lock", ())
    }

    fn simulate_user_activity(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "SimulateUserActivity", ())
    }

    fn get_active(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "GetActive", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn get_active_time(&self) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "GetActiveTime", ())
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn get_session_idle_time(&self) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "GetSessionIdleTime", ())
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn set_active(&self, e_: bool) -> Result<bool, dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "SetActive", (e_, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn inhibit(&self, application_name: &str, reason_for_inhibit: &str) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "Inhibit", (application_name, reason_for_inhibit, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn un_inhibit(&self, cookie: u32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "UnInhibit", (cookie, ))
    }

    fn throttle(&self, application_name: &str, reason_for_inhibit: &str) -> Result<u32, dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "Throttle", (application_name, reason_for_inhibit, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn un_throttle(&self, cookie: u32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.ScreenSaver", "UnThrottle", (cookie, ))
    }
}

pub trait OrgKdeScreensaver {
    fn switch_user(&self) -> Result<(), dbus::Error>;
    fn configure(&self) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgKdeScreensaverAboutToLock {
}

impl arg::AppendAll for OrgKdeScreensaverAboutToLock {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeScreensaverAboutToLock {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeScreensaverAboutToLock {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeScreensaverAboutToLock {
    const NAME: &'static str = "AboutToLock";
    const INTERFACE: &'static str = "org.kde.screensaver";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgKdeScreensaver for blocking::Proxy<'a, C> {

    fn switch_user(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.screensaver", "SwitchUser", ())
    }

    fn configure(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.screensaver", "configure", ())
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}
