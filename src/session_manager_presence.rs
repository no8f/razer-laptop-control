// This code was autogenerated with `dbus-codegen-rust -d org.gnome.SessionManager -p /org/gnome/SessionManager/Presence -m None`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgGnomeSessionManagerPresence {
    fn set_status(&self, status: u32) -> Result<(), dbus::Error>;
    fn set_status_text(&self, status_text: &str) -> Result<(), dbus::Error>;
    fn status(&self) -> Result<u32, dbus::Error>;
    fn setstatus(&self, value: u32) -> Result<(), dbus::Error>;
    fn status_text(&self) -> Result<String, dbus::Error>;
    fn setstatus_text(&self, value: String) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgGnomeSessionManagerPresence for blocking::Proxy<'a, C> {

    fn set_status(&self, status: u32) -> Result<(), dbus::Error> {
        self.method_call("org.gnome.SessionManager.Presence", "SetStatus", (status, ))
    }

    fn set_status_text(&self, status_text: &str) -> Result<(), dbus::Error> {
        self.method_call("org.gnome.SessionManager.Presence", "SetStatusText", (status_text, ))
    }

    fn status(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.gnome.SessionManager.Presence", "status")
    }

    fn status_text(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.gnome.SessionManager.Presence", "status-text")
    }

    fn setstatus(&self, value: u32) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.gnome.SessionManager.Presence", "status", value)
    }

    fn setstatus_text(&self, value: String) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(&self, "org.gnome.SessionManager.Presence", "status-text", value)
    }
}

#[derive(Debug)]
pub struct OrgGnomeSessionManagerPresenceStatusChanged {
    pub status: u32,
}

impl arg::AppendAll for OrgGnomeSessionManagerPresenceStatusChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.status, i);
    }
}

impl arg::ReadAll for OrgGnomeSessionManagerPresenceStatusChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgGnomeSessionManagerPresenceStatusChanged {
            status: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgGnomeSessionManagerPresenceStatusChanged {
    const NAME: &'static str = "StatusChanged";
    const INTERFACE: &'static str = "org.gnome.SessionManager.Presence";
}

#[derive(Debug)]
pub struct OrgGnomeSessionManagerPresenceStatusTextChanged {
    pub status_text: String,
}

impl arg::AppendAll for OrgGnomeSessionManagerPresenceStatusTextChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.status_text, i);
    }
}

impl arg::ReadAll for OrgGnomeSessionManagerPresenceStatusTextChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgGnomeSessionManagerPresenceStatusTextChanged {
            status_text: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgGnomeSessionManagerPresenceStatusTextChanged {
    const NAME: &'static str = "StatusTextChanged";
    const INTERFACE: &'static str = "org.gnome.SessionManager.Presence";
}
